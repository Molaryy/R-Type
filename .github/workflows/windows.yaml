name: Build on Windows

on:
  push:
    branches: [ "dev" ]
  pull_request:
    branches: [ "dev" ]

jobs:
  build:
    runs-on: windows-latest

    strategy:
      fail-fast: false
      matrix:
        build_type: [Release]
        cpp_compiler: [cl, clang, gcc]
        c_compiler: [cl, clang, gcc]

    steps:
      - name: Checkout the repository
        uses: actions/checkout@v4

      - name: Set reusable strings
        # Turn repeated input strings (such as the build output directory) into step outputs. These step outputs can be used throughout the workflow file.
        id: strings
        shell: bash
        run: |
          echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"

      - name: Configure CMake
        # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
        # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
        shell: cmd
        run: |
          cmake -B ${{ steps.strings.outputs.build-output-dir }} -S ${{ github.workspace }} ^
            -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }} ^
            -DCMAKE_C_COMPILER=${{ matrix.c_compiler }} ^
            -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}

      - name: Build
        # Build your program with the given configuration. Note that --config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
        shell: cmd
        run: |
          cmake --build ${{ steps.strings.outputs.build-output-dir }} --config ${{ matrix.build_type }}

      - name: Check if all files exist
        shell: bash
        run: |
          for file in $EXECUTABLES; do
            if test -f "$file"; then
              echo "File $file exists"
            else
              echo "File $file does not exist"
              exit 1
            fi
          done

      # TODO define add_test() in CMakeLists.txt if needed
      # - name: Test
      #     working-directory: ${{ steps.strings.outputs.build-output-dir }}
      #     # Execute tests defined by the CMake configuration. Note that --build-config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
      #     # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      #     run: ctest --build-config ${{ matrix.build_type }}