name: Push CI/CD

on:
  pull_request:
    types:
      - opened
    branches-ignore:
      - 'ga-ignore-**'
  push:
    branches-ignore:
      - 'ga-ignore-**'

env:
  USER: molaryy35
  IMAGE: doc-docusaurus
  VERSION: 1.0
  EXECUTABLES: "r-type_client r-type_server"
  MIRROR_URL: git@github.com:EpitechPromo2027/B-CPP-500-PAR-5-2-rtype-nicolas.gillard.git


jobs:
  commits:
    if: github.event.repository.name != 'B-CPP-500-PAR-5-2-rtype-nicolas.gillard'

    name: Checking for Conventional Commits
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: webiny/action-conventional-commits@v1.2.0

  build:
    name: Build
    runs-on: ubuntu-latest
    container:
      image: tchips46/r-type

    needs: commits

    steps:
      - name: Checkout the repository
        uses: actions/checkout@v4
      - name: Setup
        run: mkdir ./build/ && cd ./build/ && cmake .. -G "Unix Makefiles" -DTEST_CODE=ON
      - name: Build
        run: cd ./build/ && cmake --build . --config Release
        timeout-minutes: 5

      - name: Check if all files exist
        run: |
          for file in $EXECUTABLES; do
            if test -f "$file"; then
              echo "File $file exists"
            else
              echo "File $file does not exist"
              exit 1
            fi
          done

  push_to_mirror:
    name: "Pushing To The Mirror Repository"
    runs-on: ubuntu-latest

    needs: build

    steps:
      - name: Checkout's a repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: mirror repository
        uses: pixta-dev/repository-mirroring-action@v1
        with:
          target_repo_url: ${{ env.MIRROR_URL }}
          ssh_private_key: ${{ secrets.GIT_SSH_PRIVATE_KEY }}

  build_windows:
      name: Build on Windows
      runs-on: windows-latest
      needs: commits

      strategy:
        fail-fast: false
        matrix:
          build_type: [Release]
          cpp_compiler: [cl]
          c_compiler: [cl]

      steps:
        - name: Checkout the repository
          uses: actions/checkout@v4

        - name: Set reusable strings
          id: strings
          shell: bash
          run: |
            echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"

        - name: Configure CMake
          shell: cmd
          run: |
            cmake -B ${{ steps.strings.outputs.build-output-dir }} -S ${{ github.workspace }} ^
              -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }} ^
              -DCMAKE_C_COMPILER=${{ matrix.c_compiler }} ^
              -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}

        - name: Build
          shell: cmd
          run: |
            cmake --build ${{ steps.strings.outputs.build-output-dir }} --config ${{ matrix.build_type }}

        - name: Check if all files exist
          shell: bash
          run: |
            for file in $EXECUTABLES; do
              if test -f "$file"; then
                echo "File $file exists"
              else
                echo "File $file does not exist"
                exit 1
              fi
            done

  doc-image:
    name: Create documentation image
    runs-on: ubuntu-latest
    needs: commits
    permissions:
      packages: write
      contents: read
      attestations: write
      id-token: write
    steps:
      - uses: actions/checkout@v4
        name: Check out the repo
      - uses: docker/login-action@v3
        name: Log in to Docker Hub
        with:
          username: ${{ env.USER }}
          password: ${{ secrets.DOCKER_PASSWORD_GIT }}
      - name: "Push the image"
        working-directory: ./docs/docusaurus
        run: |
          docker build --platform linux/amd64 -t ${{ env.USER }}/${{ env.IMAGE }} .
          docker image tag ${{ env.USER }}/${{ env.IMAGE }} ${{ env.USER }}/${{ env.IMAGE }}:${{ env.VERSION }}
          docker push ${{ env.USER }}/${{ env.IMAGE }}:${{ env.VERSION }}
          